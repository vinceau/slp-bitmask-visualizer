{"version":3,"sources":["lib/types.ts","components/ControllerDisplay.tsx","lib/buttonsToController.tsx","components/ButtonMaskInput.tsx","lib/bitmaskToButtons.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["InputBit","Map","set","ButtonInput","D_LEFT","D_RIGHT","D_DOWN","D_UP","Z","R","L","A","B","X","Y","START","nameToInputBit","ControllerDisplay","state","inputs","newState","a","dl","dr","dd","du","z","r","l","b","x","y","start","buttonsToControllerState","buttons","value","hideAnalogSticks","ButtonMaskInput","React","useState","error","setError","bitmask","setBitmask","Array","forEach","name","mask","button","isButtonPressed","push","bitmaskToButtons","onChange","target","isNaN","join","hot","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7f8de310.chunk.js","sourcesContent":["import { ButtonInput } from \"react-gamecube\";\n\nexport enum InputBit {\n  D_LEFT = 0x0001,\n  D_RIGHT = 0x0002,\n  D_DOWN = 0x0004,\n  D_UP = 0x0008,\n  Z = 0x0010,\n  R = 0x0020,\n  L = 0x0040,\n  A = 0x0100,\n  B = 0x0200,\n  X = 0x0400,\n  Y = 0x0800,\n  START = 0x1000,\n}\n\nexport const inputBitToName = new Map<string, InputBit>()\n  .set(ButtonInput.D_LEFT, InputBit.D_LEFT)\n  .set(ButtonInput.D_RIGHT, InputBit.D_RIGHT)\n  .set(ButtonInput.D_DOWN, InputBit.D_DOWN)\n  .set(ButtonInput.D_UP, InputBit.D_UP)\n  .set(ButtonInput.Z, InputBit.Z)\n  .set(ButtonInput.R, InputBit.R)\n  .set(ButtonInput.L, InputBit.L)\n  .set(ButtonInput.A, InputBit.A)\n  .set(ButtonInput.B, InputBit.B)\n  .set(ButtonInput.X, InputBit.X)\n  .set(ButtonInput.Y, InputBit.Y)\n  .set(ButtonInput.START, InputBit.START);\n\nexport const nameToInputBit = new Map<InputBit, string>()\n  .set(InputBit.D_LEFT, ButtonInput.D_LEFT)\n  .set(InputBit.D_RIGHT, ButtonInput.D_RIGHT)\n  .set(InputBit.D_DOWN, ButtonInput.D_DOWN)\n  .set(InputBit.D_UP, ButtonInput.D_UP)\n  .set(InputBit.Z, ButtonInput.Z)\n  .set(InputBit.R, ButtonInput.R)\n  .set(InputBit.L, ButtonInput.L)\n  .set(InputBit.A, ButtonInput.A)\n  .set(InputBit.B, ButtonInput.B)\n  .set(InputBit.X, ButtonInput.X)\n  .set(InputBit.Y, ButtonInput.Y)\n  .set(InputBit.START, ButtonInput.START);\n","import React from \"react\";\nimport { ButtonInput, Controller } from \"react-gamecube\";\nimport { buttonsToControllerState } from \"../lib/buttonsToController\";\n\nexport interface ControllerDisplayProps {\n  buttons: ButtonInput[];\n}\n\nexport const ControllerDisplay: React.FC<ControllerDisplayProps> = ({ buttons }) => {\n  const state = buttonsToControllerState(buttons);\n  return <Controller value={state} hideAnalogSticks={true} />;\n};\n","import { ButtonInput, ControllerInputState } from \"react-gamecube\";\n\nexport function buttonsToControllerState(inputs: ButtonInput[]): Partial<ControllerInputState> {\n  const newState: Partial<ControllerInputState> = {};\n  for (const inp of inputs) {\n    switch (inp) {\n      case ButtonInput.A:\n        newState.a = true;\n        break;\n      case ButtonInput.D_LEFT:\n        newState.dl = true;\n        break;\n      case ButtonInput.D_RIGHT:\n        newState.dr = true;\n        break;\n      case ButtonInput.D_DOWN:\n        newState.dd = true;\n        break;\n      case ButtonInput.D_UP:\n        newState.du = true;\n        break;\n      case ButtonInput.Z:\n        newState.z = true;\n        break;\n      case ButtonInput.R:\n        newState.r = true;\n        break;\n      case ButtonInput.L:\n        newState.l = true;\n        break;\n      case ButtonInput.B:\n        newState.b = true;\n        break;\n      case ButtonInput.X:\n        newState.x = true;\n        break;\n      case ButtonInput.Y:\n        newState.y = true;\n        break;\n      case ButtonInput.START:\n        newState.start = true;\n        break;\n    }\n  }\n  return newState;\n}\n","import React from \"react\";\nimport { bitmaskToButtons } from \"../lib/bitmaskToButtons\";\nimport { ControllerDisplay } from \"./ControllerDisplay\";\n\nexport const ButtonMaskInput: React.FC = () => {\n  const [error, setError] = React.useState<string>(\"\");\n  const [bitmask, setBitmask] = React.useState<number>(0);\n  const buttons = bitmaskToButtons(bitmask);\n  const onChange = (value: string) => {\n    if (isNaN(+value)) {\n      setError(\"Invalid number\");\n    } else {\n      setError(\"\");\n      setBitmask(+value);\n    }\n  };\n  return (\n    <div>\n      <input onChange={({ target }) => onChange(target.value)} />\n      <div>{error}</div>\n      <p>{buttons.join(\" + \")}</p>\n      <ControllerDisplay buttons={buttons} />\n    </div>\n  );\n};\n","import { ButtonInput } from \"react-gamecube\";\nimport { InputBit, nameToInputBit } from \"./types\";\n\nexport function isButtonPressed(bitmask: number, button: InputBit): boolean {\n  return (bitmask & button) === button;\n}\n\nexport function bitmaskToButtons(bitmask: number): ButtonInput[] {\n  const inputs = new Array<string>();\n  nameToInputBit.forEach((name, mask) => {\n    if (isButtonPressed(bitmask, mask)) {\n      inputs.push(name);\n    }\n  });\n  return inputs as ButtonInput[];\n}\n","import \"./App.scss\";\n\nimport React from \"react\";\nimport { hot } from \"react-hot-loader/root\";\n\nimport { ButtonMaskInput } from \"./components/ButtonMaskInput\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Slippi Bitmask Input Visualizer</h1>\n        <ButtonMaskInput />\n      </header>\n    </div>\n  );\n};\n\nexport default hot(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"./index.scss\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}